{"version":3,"file":"static/js/249.e0e3c623.chunk.js","mappings":"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","sources":["components/Customer/Login/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport './Login.css';\r\n\r\nconst Login = ({ onLoginSuccess }) => {\r\n  const [formData, setFormData] = useState({\r\n    mobile_number: '',\r\n    password: '',\r\n  });\r\n\r\n  const [error, setError] = useState(null);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n \r\n    setLoading(true);\r\n    try {\r\n      // Login API call\r\n      const loginResponse = await fetch('https://prasad-gz5p.onrender.com/api/login/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n \r\n      if (!loginResponse.ok) {\r\n        const errorData = await loginResponse.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n \r\n      const { token } = await loginResponse.json();\r\n      localStorage.setItem('authToken', token);\r\n      console.log(token)\r\n      // Check for specific mobile number and password for Admin\r\n      if (formData.mobile_number === '9848098480' && formData.password === 'shiva') {\r\n        setError(null);\r\n        onLoginSuccess('admin'); // Pass role as 'admin'\r\n        navigate('/Admin-Home');\r\n      } else {\r\n        // Now trigger the /home/ API call to check for customer redirection\r\n        const homeResponse = await fetch('https://prasad-gz5p.onrender.com/api/home/', {\r\n          headers: {\r\n            'Authorization': `Token ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n \r\n        if (!homeResponse.ok) {\r\n          throw new Error('Failed to verify home redirection.');\r\n        }\r\n \r\n        const homeData = await homeResponse.json();\r\n \r\n        // Check if redirect is \"supplier_customer_home\"\r\n        if (homeData.redirect === 'supplier_customer_home') {\r\n          setError(null);\r\n          onLoginSuccess('customer'); // Pass role as 'customer'\r\n          navigate('/customer-home');\r\n        }else if(homeData.redirect === 'customer_home'){\r\n          setError(null);\r\n          onLoginSuccess('BasicCustomer'); // Pass role as 'customer'\r\n          navigate('/bbrands');\r\n        } else {\r\n          throw new Error('Invalid redirection.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='mainContainer010'>\r\n      <div className=\"login-page010\">\r\n        <div className=\"container010\">\r\n          <h1 className=\"heading010\">Login</h1>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n          <form onSubmit={handleSubmit} className=\"form010\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"mobile_number\"\r\n              placeholder=\"Mobile Number\"\r\n              value={formData.mobile_number}\r\n              onChange={handleChange}\r\n              required\r\n              className=\"input010\"\r\n            />\r\n            <div className=\"password-container010\">\r\n              <input\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                required\r\n                className=\"input010\"\r\n              />\r\n              <span\r\n                className=\"password-toggle010\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n              >\r\n                <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash}  className='eye'/>\r\n              </span>\r\n            </div>\r\n            <button type=\"submit\" className=\"login-button010\" disabled={loading}>\r\n              {loading ? 'Loading...' : 'Login'}\r\n            </button>\r\n          </form>\r\n          <p>\r\n            Don't have an account?\r\n            <button\r\n              onClick={() => navigate('/register')}\r\n              className=\"register-button010\"\r\n            >\r\n              Register here\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\n// import './Login.css';\r\n \r\n// const Login = ({ onLoginSuccess }) => {\r\n//   const [formData, setFormData] = useState({\r\n//     mobile_number: '',\r\n//     password: '',\r\n//   });\r\n \r\n//   const [error, setError] = useState(null);\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const navigate = useNavigate();\r\n \r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n \r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n \r\n//     setLoading(true);\r\n//     try {\r\n//       // Login API call\r\n//       const loginResponse = await fetch('https://prasad-gz5p.onrender.com/api/login/', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n \r\n//       if (!loginResponse.ok) {\r\n//         const errorData = await loginResponse.json();\r\n//         throw new Error(errorData.message || 'Login failed');\r\n//       }\r\n \r\n//       const { token } = await loginResponse.json();\r\n//       localStorage.setItem('authToken', token);\r\n \r\n//       // Check for specific mobile number and password for Admin\r\n//       if (formData.mobile_number === '9848098480' && formData.password === 'shiva') {\r\n//         setError(null);\r\n//         onLoginSuccess('admin'); // Pass role as 'admin'\r\n//         navigate('/Admin-Home');\r\n//       } else {\r\n//         // Now trigger the /home/ API call to check for customer redirection\r\n//         const homeResponse = await fetch('https://prasad-gz5p.onrender.com/api/home/', {\r\n//           headers: {\r\n//             'Authorization': `Token ${token}`,\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//         });\r\n \r\n//         if (!homeResponse.ok) {\r\n//           throw new Error('Failed to verify home redirection.');\r\n//         }\r\n \r\n//         const homeData = await homeResponse.json();\r\n \r\n//         // Check if redirect is \"supplier_customer_home\"\r\n//         if (homeData.redirect === 'supplier_customer_home') {\r\n//           setError(null);\r\n//           onLoginSuccess('customer'); // Pass role as 'customer'\r\n//           navigate('/customer-home');\r\n//         }else if(homeData.redirect === 'customer_home'){\r\n//           setError(null);\r\n//           onLoginSuccess('BasicCustomer'); // Pass role as 'customer'\r\n//           navigate('/bbrands');\r\n//         } else {\r\n//           throw new Error('Invalid redirection.');\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       setError(error.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n \r\n//   return (\r\n//     <div className='mainContainer010'>\r\n//       <div className=\"login-page010\">\r\n//         <div className=\"container010\">\r\n//           <h1 className=\"heading010\">Customer Login</h1>\r\n//           {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//           <form onSubmit={handleSubmit} className=\"form010\">\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"mobile_number\"\r\n//               placeholder=\"Mobile Number\"\r\n//               value={formData.mobile_number}\r\n//               onChange={handleChange}\r\n//               required\r\n//               className=\"input010\"\r\n//             />\r\n//             <div className=\"password-container010\">\r\n//               <input\r\n//                 type={showPassword ? \"text\" : \"password\"}\r\n//                 name=\"password\"\r\n//                 placeholder=\"Password\"\r\n//                 value={formData.password}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//                 className=\"input010\"\r\n//               />\r\n//               <span\r\n//                 className=\"password-toggle010\"\r\n//                 onClick={() => setShowPassword(!showPassword)}\r\n//               >\r\n//                 <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash} />\r\n//               </span>\r\n//             </div>\r\n//             <button type=\"submit\" className=\"button010\" disabled={loading}>\r\n//               {loading ? 'Logging in...' : 'Login'}\r\n//             </button>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Login; "],"names":["_ref","onLoginSuccess","formData","setFormData","useState","mobile_number","password","error","setError","showPassword","setShowPassword","loading","setLoading","navigate","useNavigate","handleChange","e","name","value","target","_jsx","className","children","_jsxs","style","color","onSubmit","async","preventDefault","loginResponse","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","token","localStorage","setItem","console","log","homeResponse","homeData","redirect","type","placeholder","onChange","required","onClick","FontAwesomeIcon","icon","faEye","faEyeSlash","disabled"],"sourceRoot":""}