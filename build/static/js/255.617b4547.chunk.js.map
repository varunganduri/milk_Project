{"version":3,"file":"static/js/255.617b4547.chunk.js","mappings":"wKA2UA,QArUA,WACI,MAAO,CAAEA,IAAsBC,EAAAA,EAAAA,UAAS,CAAEC,SAAU,GAAIC,cAAe,MAChE,CAAEC,IAAYH,EAAAA,EAAAA,UAAS,OACvBI,EAAcC,IAAmBL,EAAAA,EAAAA,UAAS,KAC1CM,EAAmBC,IAAwBP,EAAAA,EAAAA,UAAS,KACpDQ,EAAkBC,IAAuBT,EAAAA,EAAAA,UAAS,CAAEU,GAAI,GAAIR,cAAe,MAC3ES,EAAsBC,IAA2BZ,EAAAA,EAAAA,WAAS,IAC1Da,EAAqBC,IAA0Bd,EAAAA,EAAAA,UAAS,KACxDe,EAAkBC,IAAuBhB,EAAAA,EAAAA,UAAS,KAClDiB,EAAiBC,IAAsBlB,EAAAA,EAAAA,WAAS,IAChDmB,EAAkBC,IAAuBpB,EAAAA,EAAAA,WAAS,IAClDqB,EAAaC,IAAkBtB,EAAAA,EAAAA,WAAS,IACxCuB,EAAUC,IAAexB,EAAAA,EAAAA,UAAS,CACrCyB,YAAa,GACbC,WAAY,GACZC,UAAW,MAERC,EAAcC,IAAmB7B,EAAAA,EAAAA,UAAS,KAC1C8B,EAAgBC,IAAqB/B,EAAAA,EAAAA,WAAS,GAE/CgC,GAAsBC,EAAAA,EAAAA,QAAO,MAC7BC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAQC,aAAaC,QAAQ,aACnC,IAAKF,EAED,YADAH,EAAS,UAyBbM,IArB0BC,WACtBrB,GAAoB,GACpB,IACI,MAAMsB,QAAiBC,MAAM,iEAAkE,CAC3FC,QAAS,CAAE,cAAiB,SAASP,OAGzC,IAAKK,EAASG,GACV,MAAM,IAAIC,MAAM,iCAGpB,MAAMC,QAAaL,EAASM,OAC5B3C,EAAgB0C,EAAKE,WACrB1C,EAAqBwC,EAAKE,UAC9B,CAAE,MAAOC,GACL/C,EAAS+C,EAAMC,QACnB,CAAC,QACG/B,GAAoB,EACxB,GAIJgC,EAAmB,GACpB,CAAClB,KAEJE,EAAAA,EAAAA,YAAU,KACN,MAAMiB,EAAWjD,EAAakD,QAAOC,GACjCA,EAASrD,cAAcsD,SAAS3C,KAEpCN,EAAqB8C,EAAS,GAC/B,CAACxC,EAAqBT,IAEzB,MAKMoC,EAAuBC,UACzB,MAAMJ,EAAQC,aAAaC,QAAQ,aACnC,IACI,MAAMG,QAAiBC,MAAM,qDAAsD,CAC/EC,QAAS,CAAE,cAAiB,SAASP,OAGzC,IAAKK,EAASG,GACV,MAAM,IAAIC,MAAM,oCAGpB,MAAMC,QAAaL,EAASM,OAC5BjD,EAAmB,CAAEE,SAAU8C,EAAK9C,SAAUC,cAAe6C,EAAK7C,eACtE,CAAE,MAAOgD,GACL/C,EAAS+C,EAAMC,QACnB,GAwFJ,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAaG,IAAK7B,EAAoB2B,SAAA,EACjDC,EAAAA,EAAAA,KAAA,UACIE,QAASA,KACLlD,GAAyBD,GACpBA,EAGDqB,EAAoB+B,QAAQC,UAAUC,OAAO,iBAF7CjC,EAAoB+B,QAAQC,UAAUE,IAAI,gBAG9C,EAEJR,UAAU,oBAAmBC,SAE5BnD,EAAiBN,eACduD,EAAAA,EAAAA,MAAAU,EAAAA,SAAA,CAAAR,SAAA,CACKnD,EAAiBN,eAClB0D,EAAAA,EAAAA,KAAA,QAAMF,UAAU,gBAAgBI,QAxB9BM,KAC1B3D,EAAoB,CAAEC,GAAI,GAAIR,cAAe,KAC7Cc,EAAoB,GAAG,EAsBgE2C,SAAC,YAEpE,sBAEPhD,IACG8C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SACIS,KAAK,OACLC,YAAY,0BACZC,MAAO1D,EACP2D,SAAWC,GAAM3D,EAAuB2D,EAAEC,OAAOH,OACjDb,UAAU,oBAGdE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BAA2BC,SACrCxC,GAEGyC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,SAAC,yBAExBrD,EAAkBqE,QAClBf,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAC1BrD,EAAkBsE,KAAI,CAACrB,EAAUsB,KAC9BjB,EAAAA,EAAAA,KAAA,MAAgBE,QAASA,IArJnCP,KAC1B9C,EAAoB,CAAEC,GAAI6C,EAAS7C,GAAIR,cAAeqD,EAASrD,gBAC/DU,GAAwB,EAAM,EAmJqCkE,CAAqBvB,GAAUI,SACzDJ,EAASrD,eADL2E,QAMjBjB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iBAAgBC,SAAC,gCAOlDC,EAAAA,EAAAA,KAAA,UAAQE,QAtHSrB,UACrBjC,EAAiBE,SAtBK+B,WAC1B,MAAMJ,EAAQC,aAAaC,QAAQ,aACnCrB,GAAmB,GACnB,IACI,MAAMwB,QAAiBC,MAAM,2EAA2EnC,EAAiBE,KAAM,CAC3HkC,QAAS,CAAE,cAAiB,SAASP,OAGzC,IAAKK,EAASG,GACV,MAAM,IAAIC,MAAM,qCAGpB,MAAMC,QAAaL,EAASM,OAC5BhC,EAAoB+B,EAAKgC,SAC7B,CAAE,MAAO7B,GACL/C,EAAS+C,EAAMC,QACnB,CAAC,QACGjC,GAAmB,EACvB,GAKU8D,EACV,EAmH+CtB,UAAU,eAAeuB,UAAWzE,EAAiBE,GAAGiD,SAAC,uBAKnG1C,GACG2C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,KAACsB,EAAAA,EAAO,MAGZ1E,EAAiBE,IAAMK,EAAiB4D,OAAS,IAC7Cf,EAAAA,EAAAA,KAAA,OAAAD,UAEIC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BAA0BC,SACpC5C,EAAiB6D,KAAI,CAACO,EAASN,KAC5BpB,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,SAAQC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAC9BC,EAAAA,EAAAA,KAAA,OAAKwB,IAAKD,EAAQE,UAAWC,IAAKH,EAAQI,YAAa7B,UAAU,eAErED,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,UACpBC,EAAAA,EAAAA,KAAA,KAAAD,UAAGC,EAAAA,EAAAA,KAAA,QAAAD,SAAOwB,EAAQK,eAChB,KAAC5B,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YACrBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC1BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIwB,EAAQI,iBAEhB3B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,MAAKC,SAAA,CAAC,YAAQC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,iBAAgBC,SAAEwB,EAAQM,eAE5E7B,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YACdD,EAAAA,EAAAA,MAAA,KAAGC,UAAU,gBAAeC,SAAA,CAAC,gBAASwB,EAAQO,eAC7CP,EAAQxD,YACL8B,EAAAA,EAAAA,MAAA,KAAGkC,MAAO,CAAEC,MAAO,OAAQjC,SAAA,CAAC,oBAAawB,EAAQxD,iBAGzDiC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,gBAAgBI,QAASA,KACvCtC,EAAY,CACRC,YAAajB,EAAiBE,GAC9BgB,WAAYyD,EAAQzE,GACpBiB,UAAW,KAEfL,GAAe,EAAK,EACtBqC,SAAC,iBA3BGkB,SAqC7B/C,IACG8B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,SAChC/B,IAIRP,IACGuC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,UACpBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJF,EAAAA,EAAAA,MAAA,QAAMoC,SA9KLpD,UACjBgC,EAAEqB,iBACF,MAAMzD,EAAQC,aAAaC,QAAQ,aAEnC,IAUI,WATuBI,MAAM,iEAAkE,CAC3FoD,OAAQ,OACRnD,QAAS,CACL,cAAiB,SAASP,IAC1B,eAAgB,oBAEpB2D,KAAMC,KAAKC,UAAU3E,MAGXsB,GACV,MAAM,IAAIC,MAAM,0BAGpB9B,GAAqBmF,GACOA,EAAavB,KAAKO,GACtCA,EAAQzE,KAAOa,EAASG,WAClB,IAAKyD,EAASO,YAAanE,EAASI,WACpCwD,MAKdtD,EAAgB,8BACpB,CAAE,MAAOqB,GACLrB,EAAgB,UAAYqB,EAAMC,QACtC,CAAC,QACG7B,GAAe,GACfE,EAAY,CACRC,YAAa,GACbC,WAAY,GACZC,UAAW,KAGfI,GAAkB,GAClBqE,YAAW,KACPrE,GAAkB,EAAM,GACzB,IACP,GAoI6C4B,SAAA,EACzBF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,gBAEHC,EAAAA,EAAAA,KAAA,SACIS,KAAK,SACLgC,KAAK,cACL9B,MAAOhD,EAASE,YAChB6E,UAAQ,QAGhB7C,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,eAEHC,EAAAA,EAAAA,KAAA,SACIS,KAAK,OACLgC,KAAK,aACL9B,MAAOhD,EAASG,WAChB4E,UAAQ,QAGhB7C,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,cAEHC,EAAAA,EAAAA,KAAA,SACIS,KAAK,SACLgC,KAAK,YACL9B,MAAOhD,EAASI,UAChB6C,SA1JVC,IAClB,MAAM,KAAE4B,EAAI,MAAE9B,GAAUE,EAAEC,OAC1BlD,EAAY,IACLD,EACH,CAAC8E,GAAO9B,GACV,EAsJ0BgC,UAAQ,QAGhB3C,EAAAA,EAAAA,KAAA,UAAQS,KAAK,SAAQV,SAAC,YACtBC,EAAAA,EAAAA,KAAA,UAAQS,KAAK,SAASP,QAASA,IAAMxC,GAAe,GAAOqC,SAAC,qBAOxF,C,uDCtUA,MAYA,EAZgBuB,KAEZtB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SACzB6C,MAAMC,KAAK,CAAE9B,OAAQ,IAAK,CAAC+B,EAAG7B,KAC7BjB,EAAAA,EAAAA,KAAA,OAAiBF,UAAW,sCAAsCmB,EAAQ,KAAhEA,Q","sources":["components/Admin/adminHome/customers/CustomersData.js","components/Admin/spinner/Spinner.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport './CustomersData.css';\r\nimport Spinner from '../../spinner/Spinner';\r\n\r\nfunction CustomersData() {\r\n    const [, setCustomerDetails] = useState({ username: '', mobile_number: '' });\r\n    const [, setError] = useState(null);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [filteredCustomers, setFilteredCustomers] = useState([]);\r\n    const [selectedCustomer, setSelectedCustomer] = useState({ id: '', mobile_number: '' });\r\n    const [customerDropdownOpen, setCustomerDropdownOpen] = useState(false);\r\n    const [customerSearchQuery, setCustomerSearchQuery] = useState('');\r\n    const [customerProducts, setCustomerProducts] = useState([]);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [loadingCustomers, setLoadingCustomers] = useState(false); // New loading state\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        customer_id: '',\r\n        product_id: '',\r\n        new_price: ''\r\n    });\r\n    const [popupMessage, setPopupMessage] = useState('');\r\n    const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n    // const dropdownRef = useRef(null);\r\n    const customerDropdownRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            navigate('/login');\r\n            return;\r\n        }\r\n\r\n        const fetchCustomerData = async () => {\r\n            setLoadingCustomers(true); // Start loading\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch customer data`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                setCustomerData(data.customers);\r\n                setFilteredCustomers(data.customers);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoadingCustomers(false); // End loading\r\n            }\r\n        };\r\n\r\n        fetchCustomerDetails();\r\n        fetchCustomerData();\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        const filtered = customerData.filter(customer =>\r\n            customer.mobile_number.includes(customerSearchQuery)\r\n        );\r\n        setFilteredCustomers(filtered);\r\n    }, [customerSearchQuery, customerData]);\r\n\r\n    const handleSelectCustomer = (customer) => {\r\n        setSelectedCustomer({ id: customer.id, mobile_number: customer.mobile_number });\r\n        setCustomerDropdownOpen(false);\r\n    };\r\n\r\n    const fetchCustomerDetails = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/user/details/', {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer details`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setCustomerDetails({ username: data.username, mobile_number: data.mobile_number });\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const fetchCustomerProducts = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/?customer=${selectedCustomer.id}`, {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer products`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setCustomerProducts(data.products);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n\r\n    const handleSubmitCustomer = async () => {\r\n        if (selectedCustomer.id) {\r\n            await fetchCustomerProducts();\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const token = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Token ${token}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to update price`);\r\n            }\r\n\r\n            setCustomerProducts((prevProducts) => {\r\n                const updatedProducts = prevProducts.map((product) =>\r\n                    product.id === formData.product_id\r\n                        ? { ...product, final_price: formData.new_price }\r\n                        : product\r\n                );\r\n                return updatedProducts;\r\n            });\r\n\r\n            setPopupMessage('Price updated successfully!');\r\n        } catch (error) {\r\n            setPopupMessage('Error: ' + error.message);\r\n        } finally {\r\n            setIsModalOpen(false);\r\n            setFormData({\r\n                customer_id: '',\r\n                product_id: '',\r\n                new_price: ''\r\n            });\r\n\r\n            setIsPopupVisible(true);\r\n            setTimeout(() => {\r\n                setIsPopupVisible(false);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleCancelSelection = () => {\r\n        setSelectedCustomer({ id: '', mobile_number: '' });\r\n        setCustomerProducts([]); // Clear fetched products\r\n    };\r\n\r\n    return (\r\n        <div className=\"customer-home1p7\">\r\n            <h2>Customers</h2>\r\n            <div className=\"customer-sectionp7\">\r\n                <div className=\"dropdownp7\" ref={customerDropdownRef}>\r\n                    <button\r\n                        onClick={() => {\r\n                            setCustomerDropdownOpen(!customerDropdownOpen);\r\n                            if (!customerDropdownOpen) {\r\n                                customerDropdownRef.current.classList.add('dropdown-open');\r\n                            } else {\r\n                                customerDropdownRef.current.classList.remove('dropdown-open');\r\n                            }\r\n                        }}\r\n                        className=\"dropdown-togglep7\"\r\n                    >\r\n                        {selectedCustomer.mobile_number ? (\r\n                            <>\r\n                                {selectedCustomer.mobile_number}\r\n                                <span className=\"cancel-iconp7\" onClick={handleCancelSelection}>&times;</span>\r\n                            </>\r\n                        ) : 'Select a Customer'}\r\n                    </button>\r\n                    {customerDropdownOpen && (\r\n                        <div className=\"dropdown-menup7\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search by mobile number\"\r\n                                value={customerSearchQuery}\r\n                                onChange={(e) => setCustomerSearchQuery(e.target.value)}\r\n                                className=\"search-inputp7\"\r\n                            />\r\n\r\n                            <div className=\"customer-list-containerp7\">\r\n                                {loadingCustomers ? (\r\n                                    \r\n                                    <div className=\"loader\">Loading customers...</div> // Loader for customers\r\n                                    \r\n                                ) : filteredCustomers.length ? (\r\n                                    <ul className=\"customer-listp7\">\r\n                                        {filteredCustomers.map((customer, index) => (\r\n                                            <li key={index} onClick={() => handleSelectCustomer(customer)}>\r\n                                                {customer.mobile_number}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                ) : (\r\n                                    <p className=\"no-customersp7\">No customers found</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <button onClick={handleSubmitCustomer} className=\"btn-submitp7\" disabled={!selectedCustomer.id}>\r\n                    Submit Customer\r\n                </button>\r\n            </div>\r\n\r\n            {loadingProducts ? (\r\n                <div className=\"spinnerp7\">\r\n                    <Spinner />\r\n                </div>\r\n            ) : (\r\n                selectedCustomer.id && customerProducts.length > 0 && (\r\n                    <div>\r\n                       \r\n                        <div className='product-card-containerp7'>\r\n                            {customerProducts.map((product, index) => (\r\n                                <div key={index} className=\"cardp7\">\r\n                                    <div className=\"image_containerp7\">\r\n                                        <img src={product.image_url} alt={product.description} className=\"imagep7\" />\r\n                                    </div>\r\n                                    <div className=\"bottom-sectionp7\">\r\n                                        <div className=\"titlep7\">\r\n                                            <p><span>{product.category}</span></p>\r\n                                        </div> <hr className='border'/>\r\n                                        <div className=\"descriptionp7\">\r\n                                            <p>{product.description}</p>\r\n                                        </div>\r\n                                        <div className=\"volumep7\">\r\n                                            <span className=\"qty\">Volume: <span className=\"volume-valuep7\">{product.volume}</span></span>\r\n                                        </div>\r\n                                        <hr className='border'/>\r\n                                        <p className='Final_pricep7'>Price: ₹{product.final_price}</p>\r\n                                        {product.new_price && (\r\n                                            <p style={{ color: 'red' }}>New Price: ₹{product.new_price}</p>\r\n                                        )}\r\n                                    </div>\r\n                                    <button className=\"edit-buttonp7\" onClick={() => {\r\n                                        setFormData({\r\n                                            customer_id: selectedCustomer.id,\r\n                                            product_id: product.id,\r\n                                            new_price: ''\r\n                                        });\r\n                                        setIsModalOpen(true);\r\n                                    }}>\r\n                                        Edit Price\r\n                                    </button>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            )}\r\n\r\n            {isPopupVisible && (\r\n                <div className=\"popup-notificationp7\">\r\n                    {popupMessage}\r\n                </div>\r\n            )}\r\n\r\n            {isModalOpen && (\r\n                <div className=\"modalp7\">\r\n                    <div className=\"modal-contentp7\">\r\n                        <h2>Edit Product Price for Customer</h2>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <label>\r\n                                Customer ID:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"customer_id\"\r\n                                    value={formData.customer_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                Product ID:\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"product_id\"\r\n                                    value={formData.product_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                New Price:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"new_price\"\r\n                                    value={formData.new_price}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                            <button type=\"submit\">Submit</button>\r\n                            <button type=\"button\" onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomersData;\r\n","import React from 'react';\r\nimport './Spinner.css'; // Make sure to import the CSS file\r\n \r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Spinner;"],"names":["setCustomerDetails","useState","username","mobile_number","setError","customerData","setCustomerData","filteredCustomers","setFilteredCustomers","selectedCustomer","setSelectedCustomer","id","customerDropdownOpen","setCustomerDropdownOpen","customerSearchQuery","setCustomerSearchQuery","customerProducts","setCustomerProducts","loadingProducts","setLoadingProducts","loadingCustomers","setLoadingCustomers","isModalOpen","setIsModalOpen","formData","setFormData","customer_id","product_id","new_price","popupMessage","setPopupMessage","isPopupVisible","setIsPopupVisible","customerDropdownRef","useRef","navigate","useNavigate","useEffect","token","localStorage","getItem","fetchCustomerDetails","async","response","fetch","headers","ok","Error","data","json","customers","error","message","fetchCustomerData","filtered","filter","customer","includes","_jsxs","className","children","_jsx","ref","onClick","current","classList","remove","add","_Fragment","handleCancelSelection","type","placeholder","value","onChange","e","target","length","map","index","handleSelectCustomer","products","fetchCustomerProducts","disabled","Spinner","product","src","image_url","alt","description","category","volume","final_price","style","color","onSubmit","preventDefault","method","body","JSON","stringify","prevProducts","setTimeout","name","readOnly","required","Array","from","_"],"sourceRoot":""}