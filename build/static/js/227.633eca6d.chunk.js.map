{"version":3,"file":"static/js/227.633eca6d.chunk.js","mappings":"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","sources":["components/Customer/Brands/Brands.js","components/Customer/DotSpinner/DotSpinner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DotSpinner from '../DotSpinner/DotSpinner';\r\nimport './Brands.css';\r\n\r\nconst Brands = () => {\r\n    const [brands, setBrands] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedBrandID, setSelectedBrandID] = useState(null);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [viewingProducts, setViewingProducts] = useState(false); // State to track viewing products\r\n\r\n    // Fetch brands when component mounts\r\n    useEffect(() => {\r\n        const fetchBrands = async () => {\r\n            const token = localStorage.getItem('authToken');\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/brands/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch brands data');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setBrands(data);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchBrands();\r\n    }, []);\r\n\r\n    // Fetch products based on selected brand ID\r\n    const fetchProducts = async (brandID) => {\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/products/');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.json();\r\n            const filteredProducts = data.filter(product => product.brandID === brandID);\r\n            setProducts(filteredProducts);\r\n            setSelectedBrandID(brandID);\r\n            setViewingProducts(true); // Set to true when viewing products\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n\r\n    // Handle viewing products of a selected brand\r\n    const handleViewProducts = (brandID) => {\r\n        fetchProducts(brandID);\r\n    };\r\n\r\n    // Handle going back to brands\r\n    const handleBackToBrands = () => {\r\n        setViewingProducts(false);\r\n        setProducts([]); // Clear products when going back\r\n        setSelectedBrandID(null); // Clear selected brand ID\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"loading-message\"><DotSpinner/></div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"error-message\">Error: {error}</div>;\r\n    }\r\n\r\n    // Filter brands based on the search term\r\n    const filteredBrands = brands.filter((brand) =>\r\n        brand.brandName.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <div className=\"brand-list-container\">\r\n            {viewingProducts ? ( // Render products view if viewingProducts is true\r\n                <div>\r\n                    <div className='back-button-cont1000'>\r\n                    <button className=\"back-button1000\" onClick={handleBackToBrands}>\r\n                        Back \r\n                    </button>\r\n                    <h2 className='product-head-1000'>Products for Brand ID: {selectedBrandID}</h2>\r\n                    </div>\r\n                    <div className=\"product-list-card-container1000\">\r\n                        {products.map((product) => (\r\n                            <div className=\"product-list-card1000\" key={product.productID}>\r\n                                <img src={product.productImage} alt={product.productCategory} className=\"product-list-image1000\" />\r\n                                <h2 className=\"product-list-title1000\">{product.productCategory}</h2>\r\n                                <p className=\"product-list-description1000\">{product.productDescription}</p>\r\n                                <p className=\"product-list-volume1000\">Volume: {product.productVolume}</p>\r\n                                <p className=\"product-list-price1000\">Price: {product.productPrice}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <h1 className=\"brand-list-title\">Brand List</h1>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search brands...\"\r\n                        className=\"search-bar\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                    <div className=\"card-container\">\r\n                        {filteredBrands.map((brand) => (\r\n                            <div className=\"brand-card\" key={brand.brandID}>\r\n                                \r\n                                <div className=\"logo-container\">\r\n                                    <img\r\n                                        src={brand.brandLogo}\r\n                                        alt={brand.brandName}\r\n                                        className=\"brand-logo\"\r\n                                    />\r\n                                </div>\r\n                                <h2 className=\"brand-name\">{brand.brandName}</h2>\r\n                                <button\r\n                                    className=\"update-button\"\r\n                                    onClick={() => handleViewProducts(brand.brandID)}>\r\n                                    View Products\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Brands;\r\n","import React from 'react';\r\nimport './DotSpinner.css'; // Make sure to import the CSS file\r\n \r\nconst DotSpinner = () => {\r\n  return (\r\n    // <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    // </div>\r\n  );\r\n};\r\n \r\nexport default DotSpinner;\r\n \r\n "],"names":["Brands","brands","setBrands","useState","loading","setLoading","error","setError","searchTerm","setSearchTerm","products","setProducts","selectedBrandID","setSelectedBrandID","loadingProducts","setLoadingProducts","viewingProducts","setViewingProducts","useEffect","async","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","message","fetchBrands","handleViewProducts","brandID","filteredProducts","filter","product","err","fetchProducts","_jsx","className","children","DotSpinner","_jsxs","filteredBrands","brand","brandName","toLowerCase","includes","onClick","handleBackToBrands","map","src","productImage","alt","productCategory","productDescription","productVolume","productPrice","productID","_Fragment","type","placeholder","value","onChange","e","target","brandLogo","Array","from","length","_","index"],"sourceRoot":""}