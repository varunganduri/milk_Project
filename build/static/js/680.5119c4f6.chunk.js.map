{"version":3,"file":"static/js/680.5119c4f6.chunk.js","mappings":"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","sources":["components/Customer/CustomerData/CustomersData.js","components/Customer/DotSpinner/DotSpinner.js"],"sourcesContent":["\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DotSpinner from '../DotSpinner/DotSpinner';\r\n \r\nimport './CustomersData.css';\r\n \r\nfunction CustomersData() {\r\n    const [customerDetails, setCustomerDetails] = useState({ username: '', mobile_number: '' });\r\n    const [error, setError] = useState(null);\r\n    const [customerData, setCustomerData] = useState([]);\r\n    const [filteredCustomers, setFilteredCustomers] = useState([]);\r\n    const [selectedCustomer, setSelectedCustomer] = useState({ id: '', mobile_number: '' });\r\n    const [customerDropdownOpen, setCustomerDropdownOpen] = useState(false);\r\n    const [customerSearchQuery, setCustomerSearchQuery] = useState('');\r\n    const [customerProducts, setCustomerProducts] = useState([]);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [loadingCustomers, setLoadingCustomers] = useState(false); // New loading state\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        customer_id: '',\r\n        product_id: '',\r\n        new_price: ''\r\n    });\r\n    const [popupMessage, setPopupMessage] = useState('');\r\n    const [isPopupVisible, setIsPopupVisible] = useState(false);\r\n    const customerDropdownRef = useRef(null);\r\n    const navigate = useNavigate();\r\n \r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n          if (customerDropdownRef.current && !customerDropdownRef.current.contains(event.target)) {\r\n            setCustomerDropdownOpen(false);\r\n          }\r\n        };\r\n   \r\n        document.addEventListener('mousedown', handleClickOutside);\r\n   \r\n        return () => {\r\n          document.removeEventListener('mousedown', handleClickOutside);\r\n        };\r\n    }, [customerDropdownRef]);\r\n \r\n    useEffect(() => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            navigate('/login');\r\n            return;\r\n        }\r\n \r\n        const fetchCustomerData = async () => {\r\n            setLoadingCustomers(true); // Start loading\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n \r\n                if (!response.ok) {\r\n                    throw new Error(`Failed to fetch customer data`);\r\n                }\r\n \r\n                const data = await response.json();\r\n                setCustomerData(data.customers);\r\n                setFilteredCustomers(data.customers);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoadingCustomers(false); // End loading\r\n            }\r\n        };\r\n \r\n        fetchCustomerDetails();\r\n        fetchCustomerData();\r\n    }, [navigate]);\r\n \r\n    useEffect(() => {\r\n        const filtered = customerData.filter(customer =>\r\n            customer.mobile_number.includes(customerSearchQuery)\r\n        );\r\n        setFilteredCustomers(filtered);\r\n    }, [customerSearchQuery, customerData]);\r\n \r\n    const handleSelectCustomer = (customer) => {\r\n        setSelectedCustomer({ id: customer.id, mobile_number: customer.mobile_number });\r\n        setCustomerDropdownOpen(false);\r\n    };\r\n \r\n    const fetchCustomerDetails = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/user/details/', {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer details`);\r\n            }\r\n \r\n            const data = await response.json();\r\n            setCustomerDetails({ username: data.username, mobile_number: data.mobile_number });\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n \r\n    const fetchCustomerProducts = async () => {\r\n        const token = localStorage.getItem('authToken');\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/?customer=${selectedCustomer.id}`, {\r\n                headers: { 'Authorization': `Token ${token}` },\r\n            });\r\n \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch customer products`);\r\n            }\r\n \r\n            const data = await response.json();\r\n            setCustomerProducts(data.products);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n \r\n    const handleSubmitCustomer = async () => {\r\n        if (!selectedCustomer.id) {\r\n            alert('Please select a customer before submitting.');\r\n            return;\r\n        }\r\n   \r\n        await fetchCustomerProducts();\r\n    };\r\n \r\n    // const handleSubmitCustomer = async () => {\r\n    //     if (selectedCustomer.id) {\r\n    //         await fetchCustomerProducts();\r\n    //     }\r\n    // };\r\n \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const token = localStorage.getItem('authToken');\r\n \r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Token ${token}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to update price`);\r\n            }\r\n \r\n            setCustomerProducts((prevProducts) => {\r\n                const updatedProducts = prevProducts.map((product) =>\r\n                    product.id === formData.product_id\r\n                        ? { ...product, final_price: formData.new_price }\r\n                        : product\r\n                );\r\n                return updatedProducts;\r\n            });\r\n \r\n            setPopupMessage('Price updated successfully!');\r\n        } catch (error) {\r\n            setPopupMessage('Error: ' + error.message);\r\n        } finally {\r\n            setIsModalOpen(false);\r\n            setFormData({\r\n                customer_id: '',\r\n                product_id: '',\r\n                new_price: ''\r\n            });\r\n \r\n            setIsPopupVisible(true);\r\n            setTimeout(() => {\r\n                setIsPopupVisible(false);\r\n            }, 1000);\r\n        }\r\n    };\r\n \r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n \r\n    const handleCancelSelection = () => {\r\n        setSelectedCustomer({ id: '', mobile_number: '' });\r\n        setCustomerProducts([]); // Clear fetched products\r\n    };\r\n \r\n    return (\r\n        <div className=\"customer-home1p7\">\r\n            <h2 className='cust-head'>Customers</h2>\r\n            <div className=\"customer-sectionp7\">\r\n                <div className=\"dropdownp7\" ref={customerDropdownRef}>\r\n                    <button\r\n                        onClick={() => {\r\n                            setCustomerDropdownOpen(!customerDropdownOpen);\r\n                            if (!customerDropdownOpen) {\r\n                                customerDropdownRef.current.classList.add('dropdown-open');\r\n                            } else {\r\n                                customerDropdownRef.current.classList.remove('dropdown-open');\r\n                            }\r\n                        }}\r\n                        className=\"dropdown-togglep7\"\r\n                    >\r\n                        {selectedCustomer.mobile_number ? (\r\n                            <>\r\n                                {selectedCustomer.mobile_number}\r\n                                <span className=\"cancel-iconp7\" onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    handleCancelSelection(e);\r\n                                }}>&times;\r\n                                </span>\r\n                            </>\r\n                        ) : 'Select a Customer'}\r\n                    </button>\r\n                    {customerDropdownOpen && (\r\n                        <div className=\"dropdown-menup7\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Search by mobile number\"\r\n                                value={customerSearchQuery}\r\n                                onChange={(e) => setCustomerSearchQuery(e.target.value)}\r\n                                className=\"search-inputp7\"\r\n                            />\r\n \r\n                            <div className=\"customer-list-containerp7\">\r\n                                {loadingCustomers ? (\r\n                                   \r\n                                    <div className=\"loaderp7\">Loading customers...</div> // Loader for customers\r\n                                   \r\n                                ) : filteredCustomers.length ? (\r\n                                    <ul className=\"customer-listp7\">\r\n                                        {filteredCustomers.map((customer, index) => (\r\n                                            <li key={index} onClick={() => handleSelectCustomer(customer)}>\r\n                                                {customer.mobile_number}\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                ) : (\r\n                                    <p className=\"no-customersp7\">No customers found</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n \r\n                <button onClick={handleSubmitCustomer} className=\"btn-submitp7\" disabled={!selectedCustomer.id}>\r\n                    Submit Customer\r\n                </button>\r\n           \r\n \r\n            {!selectedCustomer.mobile_number && (\r\n        <div className='no-selectedp7'>\r\n          <p>No Customer Selected</p>\r\n        </div>\r\n      )}\r\n  </div>\r\n            {loadingProducts ? (\r\n               \r\n               <div style={{display: 'flex', justifyContent:'center', alignItems:'center',\r\n            height:'50vh'\r\n \r\n                }}>\r\n                    <DotSpinner />\r\n                </div>\r\n               \r\n            ) : (\r\n                selectedCustomer.id && customerProducts.length > 0 && (\r\n                    <div>\r\n                        <div className='product-card-containerp7'>\r\n                            {customerProducts.map((product, index) => (\r\n                                <div key={index} className=\"cardp7\">\r\n                                    <div className=\"image_containerp7\">\r\n                                        <img src={product.image_url} alt={product.description} className=\"imagep7\" />\r\n                                    </div>\r\n                                    <div className=\"bottom-sectionp7\">\r\n                                        <div className=\"titlep7\">\r\n                                            <p><span>{product.category}</span></p>\r\n                                        </div> <hr className='border'/>\r\n                                       \r\n                                        <div className=\"descriptionp7\">\r\n                                            <p>{product.description}</p>\r\n                                        </div>\r\n                                        <div className=\"volumep7\">\r\n                                            <span className=\"qty\">Volume: <span className=\"volume-valuep7\">{product.volume}</span></span>\r\n                                        </div>\r\n                                        <hr className='border'/>\r\n                                        <p className='Final_pricep7'>Price: ₹{product.final_price}</p>\r\n                                        {product.new_price && (\r\n                                            <p style={{ color: 'red' }}>New Price: ₹{product.new_price}</p>\r\n                                        )}\r\n                                    </div>\r\n                                    <button className=\"edit-buttonp7\" onClick={() => {\r\n                                        setFormData({\r\n                                            customer_id: selectedCustomer.id,\r\n                                            product_id: product.id,\r\n                                            new_price: ''\r\n                                        });\r\n                                        setIsModalOpen(true);\r\n                                    }}>\r\n                                        Edit Price\r\n                                    </button>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            )}\r\n \r\n            {isPopupVisible && (\r\n                <div className=\"popup-notificationp7\">\r\n                    {popupMessage}\r\n                </div>\r\n            )}\r\n \r\n            {isModalOpen && (\r\n                <div className=\"modalp7\">\r\n                    <div className=\"modal-contentp7\">\r\n                        <h2>Edit Product Price for Customer</h2>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <label>\r\n                                Customer ID:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"customer_id\"\r\n                                    value={formData.customer_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                Product ID:\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"product_id\"\r\n                                    value={formData.product_id}\r\n                                    readOnly\r\n                                />\r\n                            </label>\r\n                            <label>\r\n                                New Price:\r\n                                <input\r\n                                    type=\"number\"\r\n                                    name=\"new_price\"\r\n                                    value={formData.new_price}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                            <button type=\"submit\">Submit</button>\r\n                            <button type=\"button\" onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default CustomersData;\r\n ","import React from 'react';\r\nimport './DotSpinner.css'; // Make sure to import the CSS file\r\n \r\nconst DotSpinner = () => {\r\n  return (\r\n    // <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    // </div>\r\n  );\r\n};\r\n \r\nexport default DotSpinner;\r\n \r\n "],"names":["customerDetails","setCustomerDetails","useState","username","mobile_number","error","setError","customerData","setCustomerData","filteredCustomers","setFilteredCustomers","selectedCustomer","setSelectedCustomer","id","customerDropdownOpen","setCustomerDropdownOpen","customerSearchQuery","setCustomerSearchQuery","customerProducts","setCustomerProducts","loadingProducts","setLoadingProducts","loadingCustomers","setLoadingCustomers","isModalOpen","setIsModalOpen","formData","setFormData","customer_id","product_id","new_price","popupMessage","setPopupMessage","isPopupVisible","setIsPopupVisible","customerDropdownRef","useRef","navigate","useNavigate","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","token","localStorage","getItem","fetchCustomerDetails","async","response","fetch","headers","ok","Error","data","json","customers","message","fetchCustomerData","filtered","filter","customer","includes","_jsxs","className","children","_jsx","ref","onClick","classList","remove","add","_Fragment","e","stopPropagation","type","placeholder","value","onChange","length","map","index","handleSelectCustomer","products","fetchCustomerProducts","alert","disabled","style","display","justifyContent","alignItems","height","DotSpinner","product","src","image_url","alt","description","category","volume","final_price","color","onSubmit","preventDefault","method","body","JSON","stringify","prevProducts","setTimeout","name","readOnly","required","Array","from","_"],"sourceRoot":""}