{"version":3,"file":"static/js/526.01837771.chunk.js","mappings":"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","sources":["components/Admin/adminHome/products/AddProductForm.js","components/Admin/adminHome/products/UpdateProductForm.js","components/Admin/adminHome/products/ProductList.js","components/Admin/spinner/Spinner.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./AddProductForm.css\"\r\n \r\nconst AddProductForm = ({ onProductAdded }) => {\r\n    const [newProduct, setNewProduct] = useState({\r\n        productid: '',\r\n        productCategory: '',\r\n        productType: '',\r\n        productImage: null,\r\n        productVolume: '',\r\n        productPrice: '',\r\n        productDescription: '',\r\n        brandID: ''\r\n    });\r\n    const [message, setMessage] = useState('');\r\n \r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setNewProduct({ ...newProduct, [name]: value });\r\n    };\r\n \r\n    const handleFileChange = (e) => {\r\n        setNewProduct({ ...newProduct, productImage: e.target.files[0] });\r\n    };\r\n \r\n    // const handleSubmit = async (e) => {\r\n    //     e.preventDefault();\r\n    //     const formData = new FormData();\r\n    //     formData.append('productid', newProduct.productid);\r\n    //     formData.append('productCategory', newProduct.productCategory);\r\n    //     formData.append('productType', newProduct.productType);\r\n    //     formData.append('productImage', newProduct.productImage);\r\n    //     formData.append('productVolume', newProduct.productVolume);\r\n    //     formData.append('productPrice', newProduct.productPrice);\r\n    //     formData.append('productDescription', newProduct.productDescription);\r\n    //     formData.append('brandID', newProduct.brandID);\r\n \r\n    //     try {\r\n    //         const response = await fetch('https://prasad-gz5p.onrender.com/api/products/', {\r\n    //             method: 'POST',\r\n    //             body: formData,\r\n    //         });\r\n \r\n    //         if (!response.ok) {\r\n    //             throw new Error('Failed to add product');\r\n    //         }\r\n \r\n    //         const addedProduct = await response.json();\r\n    //         onProductAdded(addedProduct); // Notify the parent component\r\n    //         setNewProduct({\r\n    //             productid: '',\r\n    //             productCategory: '',\r\n    //             productType: '',\r\n    //             productImage: null,\r\n    //             productVolume: '',\r\n    //             productPrice: '',\r\n    //             productDescription: '',\r\n    //             brandID: ''\r\n    //         });\r\n    //         setMessage('Product added successfully!');\r\n    //     } catch (err) {\r\n    //         setMessage(err.message);\r\n    //     }\r\n    // };\r\n \r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n     \r\n        // Retrieve the token from localStorage\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setMessage('You are not authenticated. Please log in.');\r\n            return;\r\n        }\r\n     \r\n        const formData = new FormData();\r\n        formData.append('productid', newProduct.productid);\r\n        formData.append('productCategory', newProduct.productCategory);\r\n        formData.append('productType', newProduct.productType);\r\n        if (newProduct.productImage) {\r\n            formData.append('productImage', newProduct.productImage);\r\n        }\r\n        formData.append('productVolume', newProduct.productVolume);\r\n        formData.append('productPrice', newProduct.productPrice);\r\n        formData.append('productDescription', newProduct.productDescription);\r\n        formData.append('brandID', newProduct.brandID);\r\n     \r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/products/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Token ${token}`,  // Attach token here\r\n                },\r\n                body: formData,\r\n            });\r\n     \r\n            if (!response.ok) {\r\n                throw new Error('Failed to add product');\r\n            }\r\n     \r\n            const addedProduct = await response.json();\r\n            onProductAdded(addedProduct); // Notify the parent component\r\n     \r\n            setNewProduct({\r\n                productid: '',\r\n                productCategory: '',\r\n                productType: '',\r\n                productImage: null,\r\n                productVolume: '',\r\n                productPrice: '',\r\n                productDescription: '',\r\n                brandID: ''\r\n            });\r\n     \r\n            setMessage('Product added successfully!');\r\n        } catch (err) {\r\n            setMessage(err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2 style={{color:'whitesmoke'}}>Add a New Product</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"productid\"\r\n                    placeholder=\"Product ID\"\r\n                    value={newProduct.productid}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"productCategory\"\r\n                    placeholder=\"Product Category\"\r\n                    value={newProduct.productCategory}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"productType\"\r\n                    placeholder=\"Product Type\"\r\n                    value={newProduct.productType}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"productImage\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleFileChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"productVolume\"\r\n                    placeholder=\"Product Volume\"\r\n                    value={newProduct.productVolume}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"productPrice\"\r\n                    placeholder=\"Product Price\"\r\n                    value={newProduct.productPrice}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <textarea\r\n                    name=\"productDescription\"\r\n                    placeholder=\"Product Description\"\r\n                    value={newProduct.productDescription}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"brandID\"\r\n                    placeholder=\"Brand ID\"\r\n                    value={newProduct.brandID}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                />\r\n                <button type=\"submit\">Add Product</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n \r\nexport default AddProductForm;","import React, { useState, useEffect } from 'react';\r\nimport \"./UpdateProductForm.css\";\r\n\r\nconst UpdateProductForm = ({ onProductUpdated, currentProduct }) => {\r\n    const [updatedProduct, setUpdatedProduct] = useState({\r\n        productid: '',\r\n        productCategory: '',\r\n        productType: '',\r\n        productImage: '',\r\n        productVolume: '',\r\n        productPrice: '',\r\n        productDescription: '',\r\n        brandID: ''\r\n    });\r\n    const [existingImage, setExistingImage] = useState(''); // Store the current image URL\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (currentProduct) {\r\n            setUpdatedProduct(currentProduct);\r\n            setExistingImage(currentProduct.productImage); // Set existing image\r\n        }\r\n    }, [currentProduct]);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setUpdatedProduct({ ...updatedProduct, [name]: value });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setUpdatedProduct({ ...updatedProduct, productImage: e.target.files[0] });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const token = localStorage.getItem('authToken'); // Retrieve token\r\n   \r\n        const formData = new FormData();\r\n        formData.append('productid', updatedProduct.productid);\r\n        formData.append('productCategory', updatedProduct.productCategory);\r\n        formData.append('productType', updatedProduct.productType);\r\n        formData.append('productVolume', updatedProduct.productVolume);\r\n        formData.append('productPrice', updatedProduct.productPrice);\r\n        formData.append('productDescription', updatedProduct.productDescription);\r\n        formData.append('brandID', updatedProduct.brandID);\r\n   \r\n        // If a new image is uploaded, append it; otherwise, keep the existing image\r\n        if (updatedProduct.productImage) {\r\n            formData.append('productImage', updatedProduct.productImage);\r\n        } else if (existingImage) {\r\n            const response = await fetch(existingImage);\r\n            const blob = await response.blob();\r\n            const file = new File([blob], existingImage.split('/').pop(), { type: 'image/jpeg' }); // Adjust file type if necessary\r\n            formData.append('productImage', file);\r\n        }\r\n   \r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/products/${updatedProduct.productid}/update/`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Authorization': `Token ${token}`, // Add the authorization header\r\n                },\r\n                body: formData,\r\n            });\r\n   \r\n            if (!response.ok) {\r\n                throw new Error('Failed to update product');\r\n            }\r\n   \r\n            const updatedProductData = await response.json();\r\n            onProductUpdated(updatedProductData); // Notify the parent component\r\n            setMessage('Product updated successfully!');\r\n        } catch (err) {\r\n            setMessage(err.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"update-product-formV009\">\r\n            <h2>Update Product</h2>\r\n            <form onSubmit={handleSubmit} className=\"update-product-form-elementV009\">\r\n    <div className=\"input-group\">\r\n        <input\r\n            type=\"text\"\r\n            name=\"productCategory\"\r\n            placeholder=\"Product Category\"\r\n            value={updatedProduct.productCategory}\r\n            onChange={handleInputChange}\r\n            required\r\n            className=\"update-product-inputV009\"\r\n        />\r\n        <input\r\n            type=\"text\"\r\n            name=\"productType\"\r\n            placeholder=\"Product Type\"\r\n            value={updatedProduct.productType}\r\n            onChange={handleInputChange}\r\n            className=\"update-product-inputV009\"\r\n        />\r\n    </div>\r\n    <div className=\"input-group\">\r\n        <input\r\n            type=\"file\"\r\n            name=\"productImage\"\r\n            accept=\"image/*\"\r\n            onChange={handleFileChange}\r\n            className=\"update-product-file-inputV009\"\r\n        />\r\n        {existingImage && (\r\n            <div className=\"current-image-displayV009\">\r\n                <img src={existingImage} alt=\"Current Product\" />\r\n                <div className=\"current-image-checkboxV009\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={!updatedProduct.productImage} // Keep existing image if no new file is selected\r\n                        onChange={() => setUpdatedProduct({ ...updatedProduct, productImage: null })} // Clear new image selection\r\n                    />\r\n                    <span>Use Current Image</span>\r\n                </div>\r\n            </div>\r\n        )}\r\n    </div>\r\n    <div className=\"input-group\">\r\n        <input\r\n            type=\"text\"\r\n            name=\"productVolume\"\r\n            placeholder=\"Product Volume\"\r\n            value={updatedProduct.productVolume}\r\n            onChange={handleInputChange}\r\n            required\r\n            className=\"update-product-inputV009\"\r\n        />\r\n        <input\r\n            type=\"number\"\r\n            name=\"productPrice\"\r\n            placeholder=\"Product Price\"\r\n            value={updatedProduct.productPrice}\r\n            onChange={handleInputChange}\r\n            required\r\n            className=\"update-product-inputV009\"\r\n        />\r\n    </div>\r\n    <textarea\r\n        name=\"productDescription\"\r\n        placeholder=\"Product Description\"\r\n        value={updatedProduct.productDescription}\r\n        onChange={handleInputChange}\r\n        required\r\n        className=\"update-product-textareaV009\"\r\n    />\r\n    <input\r\n        type=\"text\"\r\n        name=\"brandID\"\r\n        placeholder=\"Brand ID\"\r\n        value={updatedProduct.brandID}\r\n        onChange={handleInputChange}\r\n        \r\n        required\r\n        className=\"update-product-inputV009\"\r\n    />\r\n    <button type=\"submit\" className=\"update-product-buttonV009\">Update Product</button>\r\n</form>\r\n\r\n            {message && <div className=\"update-product-messageV009\">{message}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateProductForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport AddProductForm from './AddProductForm';\r\nimport UpdateProductForm from './UpdateProductForm';\r\nimport './ProductList.css';\r\nimport Spinner from '../../spinner/Spinner';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ProductList = () => {\r\n    const { brandID } = useParams();\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [showAddProductModal, setShowAddProductModal] = useState(false);\r\n    const [showUpdateProductModal, setShowUpdateProductModal] = useState(false);\r\n    const [currentProduct, setCurrentProduct] = useState(null);\r\n    const [notification, setNotification] = useState('');\r\n    const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n    const fetchProducts = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/products/');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.json();\r\n            const filteredProducts = data.filter(product => product.brandID === brandID);\r\n            setProducts(filteredProducts);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProducts();\r\n    }, [brandID]);\r\n\r\n    const handleProductAddedOrUpdated = () => {\r\n        fetchProducts();\r\n        setShowAddProductModal(false);\r\n        setShowUpdateProductModal(false);\r\n        setNotification('Product updated successfully!');\r\n        setTimeout(() => setNotification(''), 3000);\r\n    };\r\n\r\n    const toggleAddProductModal = () => {\r\n        setShowAddProductModal(!showAddProductModal);\r\n        setShowUpdateProductModal(false);\r\n    };\r\n\r\n    const handleUpdateProduct = (product) => {\r\n        setCurrentProduct(product);\r\n        setShowUpdateProductModal(true);\r\n        setShowAddProductModal(false);\r\n    };\r\n\r\n    const handleBackToBrands = () => {\r\n        // Set the brandID to null and navigate to brands\r\n        \r\n\r\n        navigate('/brands');\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"product-list-loadingV025\"><Spinner /></div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"product-list-errorV025\">Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"product-list-containerV025\">\r\n            {notification && (\r\n                <div className=\"notification-container\" onClick={() => setNotification('')}>\r\n                    {notification}\r\n                </div>\r\n            )}\r\n            <h1 className=\"product-list-titleV025\" style={{ textAlign: 'center' }}>\r\n                Product List for Brand {brandID}\r\n            </h1>\r\n            <button className=\"back-button143\" onClick={handleBackToBrands}>\r\n                <FontAwesomeIcon icon={faArrowLeft} size=\"2x\" />\r\n            </button>\r\n            <button className=\"product-list-add-buttonV025\" onClick={toggleAddProductModal}>\r\n                {showAddProductModal ? 'Close' : 'Add Product'}\r\n            </button>\r\n            {showAddProductModal && (\r\n                <dialog className=\"product-list-modalV025\" open>\r\n                    <div className=\"product-list-modal-contentV025\">\r\n                        <span className=\"product-list-closeV025\" onClick={toggleAddProductModal}>&times;</span>\r\n                        <AddProductForm onProductAdded={handleProductAddedOrUpdated} />\r\n                    </div>\r\n                </dialog>\r\n            )}\r\n            {showUpdateProductModal && (\r\n                <dialog className=\"product-list-modalV025\" open>\r\n                    <div className=\"product-list-modal-contentV025\">\r\n                        <span className=\"product-list-closeV025\" onClick={() => setShowUpdateProductModal(false)}>&times;</span>\r\n                        <UpdateProductForm\r\n                            onProductUpdated={handleProductAddedOrUpdated}\r\n                            currentProduct={currentProduct}\r\n                        />\r\n                    </div>\r\n                </dialog>\r\n            )}\r\n            <div className=\"product-card-container\">\r\n                {products.map((product) => (\r\n                    <div className=\"card\" key={product.productid}>\r\n                        <div className=\"image_container\">\r\n                            <img src={product.productImage} alt={product.productCategory} className=\"image\" />\r\n                        </div>\r\n                        <h2 className=\"title\">{product.productCategory}</h2>\r\n                        <p className=\"description\">{product.productDescription}</p>\r\n                        <p className=\"Final_price\">Price: ₹{new Intl.NumberFormat('en-IN').format(product.productPrice)}</p>\r\n                        <button className=\"edit-button\" onClick={() => handleUpdateProduct(product)}>\r\n                            Update\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <style jsx>{`\r\n                .notification-container {\r\n                    position: fixed;\r\n                    top: 20px;\r\n                    left: 20px;\r\n                    background-color: #28a745;\r\n                    color: white;\r\n                    padding: 10px 15px;\r\n                    border-radius: 5px;\r\n                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n                    z-index: 1000;\r\n                    transition: opacity 0.5s ease;\r\n                }\r\n            `}</style>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductList;\r\n","import React from 'react';\r\nimport './Spinner.css'; // Make sure to import the CSS file\r\n \r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Spinner;"],"names":["_ref","onProductAdded","newProduct","setNewProduct","useState","productid","productCategory","productType","productImage","productVolume","productPrice","productDescription","brandID","message","setMessage","handleInputChange","e","name","value","target","_jsxs","children","_jsx","style","color","onSubmit","async","preventDefault","token","localStorage","getItem","formData","FormData","append","response","fetch","method","headers","body","ok","Error","addedProduct","json","err","type","placeholder","onChange","required","accept","files","onProductUpdated","currentProduct","updatedProduct","setUpdatedProduct","existingImage","setExistingImage","useEffect","className","blob","file","File","split","pop","updatedProductData","src","alt","checked","ProductList","useParams","products","setProducts","loading","setLoading","error","setError","showAddProductModal","setShowAddProductModal","showUpdateProductModal","setShowUpdateProductModal","setCurrentProduct","notification","setNotification","navigate","useNavigate","fetchProducts","filteredProducts","filter","product","handleProductAddedOrUpdated","setTimeout","toggleAddProductModal","Spinner","onClick","textAlign","handleBackToBrands","FontAwesomeIcon","icon","faArrowLeft","size","open","AddProductForm","UpdateProductForm","map","Intl","NumberFormat","format","handleUpdateProduct","jsx","Array","from","length","_","index"],"sourceRoot":""}