{"version":3,"file":"static/js/156.309d4c64.chunk.js","mappings":"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","sources":["components/Customer/DotSpinner/DotSpinner.js","components/Customer/Register/Register.js"],"sourcesContent":["import React from 'react';\r\nimport './DotSpinner.css'; // Make sure to import the CSS file\r\n \r\nconst DotSpinner = () => {\r\n  return (\r\n    // <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    // </div>\r\n  );\r\n};\r\n \r\nexport default DotSpinner;\r\n \r\n ","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport './Register.css';\r\nimport DotSpinner from '../DotSpinner/DotSpinner';\r\n \r\nconst Register = () => {\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    mobile_number: '',\r\n    alternate_number: '',\r\n    password: '',\r\n    confirm_password: '',\r\n    address: '',\r\n  });\r\n \r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const navigate = useNavigate();\r\n \r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n \r\n    if (formData.password !== formData.confirm_password) {\r\n      setError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n \r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('https://prasad-gz5p.onrender.com/api/register/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n \r\n      const responseData = await response.text();\r\n      console.log('Response:', responseData);\r\n \r\n      if (!response.ok) {\r\n        throw new Error(responseData || 'Registration failed');\r\n      }\r\n \r\n      const data = JSON.parse(responseData);\r\n      setSuccess(true);\r\n      setFormData({\r\n        username: '',\r\n        mobile_number: '',\r\n        alternate_number: '',\r\n        password: '',\r\n        confirm_password: '',\r\n        address: '',\r\n      });\r\n      setError(null);\r\n      navigate('/customer-home');\r\n \r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error);\r\n      setError(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n \r\n  return (\r\n    <div className=\"register-page007\">\r\n    {loading ? (\r\n          <DotSpinner />\r\n        ) : (\r\n      <div className=\"container007\">\r\n        <h1 className=\"heading007\">User Registration</h1>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        {success && <p style={{ color: 'green' }}>Registration successful!</p>}\r\n        <form className=\"form007\" onSubmit={handleSubmit}>\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"Username\"\r\n            value={formData.username}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"mobile_number\"\r\n            placeholder=\"Mobile Number\"\r\n            value={formData.mobile_number}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            className=\"input007\"\r\n            type=\"text\"\r\n            name=\"alternate_number\"\r\n            placeholder=\"Alternate Number\"\r\n            value={formData.alternate_number}\r\n            onChange={handleChange}\r\n          />\r\n          <div className=\"password-container\">\r\n            <input\r\n              className=\"input007\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={formData.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <button type=\"button\" className=\"eye-button\" onClick={() => setShowPassword(!showPassword)}>\r\n              <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash} />\r\n            </button>\r\n          </div>\r\n          <div className=\"password-container\">\r\n            <input\r\n              className=\"input007\"\r\n              type={showConfirmPassword ? 'text' : 'password'}\r\n              name=\"confirm_password\"\r\n              placeholder=\"Confirm Password\"\r\n              value={formData.confirm_password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n            <button type=\"button\" className=\"eye-button\" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>\r\n              <FontAwesomeIcon icon={showConfirmPassword ? faEye : faEyeSlash} />\r\n            </button>\r\n          </div>\r\n          <textarea\r\n            className=\"input007\"\r\n            name=\"address\"\r\n            placeholder=\"Address\"\r\n            value={formData.address}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"login-button007\" disabled={loading}>\r\n            {loading ? 'Registering...' : 'Register'}\r\n          </button>\r\n        </form>\r\n        <p>\r\n          Already have an account?\r\n          <button onClick={() => navigate('/login')} className=\"login-link007\">\r\n            Login here\r\n          </button>\r\n        </p>\r\n      </div>\r\n    )}\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Register;"],"names":["DotSpinner","_jsx","className","children","Array","from","length","_","index","Register","formData","setFormData","useState","username","mobile_number","alternate_number","password","confirm_password","address","error","setError","success","setSuccess","loading","setLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","handleChange","e","name","value","target","_jsxs","style","color","onSubmit","async","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","text","console","log","ok","Error","parse","message","type","placeholder","onChange","required","onClick","FontAwesomeIcon","icon","faEye","faEyeSlash","disabled"],"sourceRoot":""}