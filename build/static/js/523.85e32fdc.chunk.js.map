{"version":3,"file":"static/js/523.85e32fdc.chunk.js","mappings":"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","sources":["components/BasicCustomer/BasicBrands/BasicBrands.js","components/BasicCustomer/BasicDotSpinner/BasicDotSpinner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DotSpinner from '../BasicDotSpinner/BasicDotSpinner';\r\nimport './BasicBrands.css';\r\n\r\nconst BasicBrands = () => {\r\n    const [brands, setBrands] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n    const [selectedBrandID, setSelectedBrandID] = useState(null);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [viewingProducts, setViewingProducts] = useState(false);\r\n\r\n    // Fetch brands when component mounts\r\n    useEffect(() => {\r\n        const fetchBrands = async () => {\r\n            const token = localStorage.getItem('authToken');\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/brands/', {\r\n                    headers: { 'Authorization': `Token ${token}` },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch brands data');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setBrands(data);\r\n            } catch (error) {\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchBrands();\r\n    }, []);\r\n\r\n    // Fetch products based on selected brand ID\r\n    const fetchProducts = async (brandID) => {\r\n        setLoadingProducts(true);\r\n        try {\r\n            const response = await fetch('https://prasad-gz5p.onrender.com/api/products/');\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.json();\r\n            const filteredProducts = data.filter(product => product.brandID === brandID);\r\n            console.log(filteredProducts)\r\n            setProducts(filteredProducts);\r\n            setSelectedBrandID(brandID);\r\n            setViewingProducts(true); \r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoadingProducts(false);\r\n        }\r\n    };\r\n\r\n    const handleViewProducts = (brandID) => {\r\n        fetchProducts(brandID);\r\n    };\r\n\r\n    const handleBackToBrands = () => {\r\n        setViewingProducts(false);\r\n        setProducts([]);\r\n        setSelectedBrandID(null);\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"loading-messageb30\"><DotSpinner /></div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"error-messageb30\">Error: {error}</div>;\r\n    }\r\n\r\n    const filteredBrands = brands.filter((brand) =>\r\n        brand.brandName.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    // const handleQuantityChange = (productId, change) => {\r\n    //     const quantityInput = document.getElementById(`quantity-${productId}`);\r\n    //     let currentQuantity = parseInt(quantityInput.value) || 1;\r\n    //     currentQuantity += change;\r\n    //     if (currentQuantity < 1) {\r\n    //         currentQuantity = 1;\r\n    //     }\r\n    //     quantityInput.value = currentQuantity;\r\n    //   };\r\n\r\n    // Updated function with the correct product ID and field names\r\n    // const handleAddToCart = async (productID, quantity, price) => {\r\n    //     console.log(productID)\r\n    //     const token = localStorage.getItem('authToken');\r\n    //     const dataToSubmit = {\r\n    //         product_id: productID,\r\n    //         quantity: quantity,\r\n    //         price: parseFloat(price),\r\n    //     };\r\n\r\n    //     try {\r\n    //         const response = await fetch(`https://prasad-gz5p.onrender.com/api/add-to-cart/${productID}/`, {\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 'Authorization': `Token ${token}`,\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             body: JSON.stringify(dataToSubmit),\r\n    //         });\r\n\r\n    //         if (!response.ok) {\r\n    //             throw new Error(`Failed to add to cart: ${response.statusText}`);\r\n    //         }\r\n    //         alert('Product added to cart successfully!');\r\n    //     } catch (error) {\r\n    //         alert('Error: ' + error.message);\r\n    //     }\r\n    // };\r\n\r\n    return (\r\n        <div className=\"brand-list-containerb30\">\r\n            {viewingProducts ? (\r\n            <div>\r\n                <div className=\"selectasupplierb30\">\r\n                    <h3>Please select a Supplier to Buy Products</h3>\r\n                </div>\r\n                    <div className=\"back-button-contb30\">\r\n                        <button className=\"back-buttonb30\" onClick={handleBackToBrands}>\r\n                            Back\r\n                        </button>\r\n                        <h2 className=\"product-headb30\">Products for Brand ID: {selectedBrandID}</h2>\r\n                    </div>\r\n                    <div className=\"product-list-card-containerb30\">\r\n                        {products.map((product) => (\r\n                            <div className=\"product-list-cardb30\" key={product.productid}>\r\n                            \r\n                                <img src={product.productImage} alt={product.productCategory} className=\"product-list-imageb30\" />\r\n                                <h2 className=\"product-list-titleb30\">{product.productCategory}</h2>\r\n                                <p className=\"product-list-descriptionb30\">{product.productDescription}</p>\r\n                                <p className=\"product-list-volumeb30\">Volume: {product.productVolume}</p>\r\n                                <p className=\"product-list-priceb30\">Price: ${product.productPrice}</p>\r\n                                {/* <div className=\"quantityb30\">\r\n                                    <span className=\"qtyb30\">Quantity</span>\r\n                                    <button className=\"volume-buttonb30\" onClick={() => handleQuantityChange(product.id, -1)}>-</button>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        min=\"1\"\r\n                                        defaultValue=\"1\"\r\n                                        className=\"inputBoxb30\"\r\n                                        id={`quantity-${product.id}`}\r\n                                    />\r\n                                    <button className=\"volume-buttonb30\" onClick={() => handleQuantityChange(product.id, 1)}>+</button>\r\n                                </div>\r\n                                <button className=\"cart-buttonb30\" onClick={() => {\r\n                                    const quantity = parseInt(document.getElementById(`quantity-${product.productID}`).value) || 1;\r\n                                    handleAddToCart(product.productid, quantity, product.productPrice);\r\n                                }}>\r\n                                    <svg className=\"cart-iconb30\" stroke=\"currentColor\" strokeWidth=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                        <path d=\"M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z\" strokeLinejoin=\"round\" strokeLinecap=\"round\"></path>\r\n                                    </svg>\r\n                                    <span>Add to cart</span>\r\n                                </button> */}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <h1 className=\"brand-list-titleb30\">Brand List</h1>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search brands...\"\r\n                        className=\"search-barb30\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                    />\r\n                    <div className=\"card-containerb30\">\r\n                        {filteredBrands.map((brand) => (\r\n                            <div className=\"brand-cardb30\" key={brand.brandID}>\r\n                                <div className=\"logo-containerb30\">\r\n                                    <img\r\n                                        src={brand.brandLogo}\r\n                                        alt={brand.brandName}\r\n                                        className=\"brand-logob30\"\r\n                                    />\r\n                                </div>\r\n                                <h2 className=\"brand-nameb30\">{brand.brandName}</h2>\r\n                                <button\r\n                                    className=\"update-buttonb30\"\r\n                                    onClick={() => handleViewProducts(brand.brandID)}>\r\n                                    View Products\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BasicBrands;","import React from 'react';\r\nimport './BasicDotSpinner.css'; // Make sure to import the CSS file\r\n \r\nconst BasicDotSpinner = () => {\r\n  return (\r\n    // <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinnerb26\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dotb26 dot-spinner__dotb26--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    // </div>\r\n  );\r\n};\r\n \r\nexport default BasicDotSpinner;"],"names":["BasicBrands","brands","setBrands","useState","loading","setLoading","error","setError","searchTerm","setSearchTerm","products","setProducts","selectedBrandID","setSelectedBrandID","loadingProducts","setLoadingProducts","viewingProducts","setViewingProducts","useEffect","async","token","localStorage","getItem","response","fetch","headers","ok","Error","data","json","message","fetchBrands","handleViewProducts","brandID","filteredProducts","filter","product","console","log","err","fetchProducts","_jsx","className","children","DotSpinner","_jsxs","filteredBrands","brand","brandName","toLowerCase","includes","onClick","handleBackToBrands","map","src","productImage","alt","productCategory","productDescription","productVolume","productPrice","productid","_Fragment","type","placeholder","value","onChange","e","target","brandLogo","BasicDotSpinner","Array","from","length","_","index"],"sourceRoot":""}