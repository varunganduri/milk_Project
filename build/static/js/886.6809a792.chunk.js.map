{"version":3,"file":"static/js/886.6809a792.chunk.js","mappings":"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","sources":["components/Admin/adminHome/orderHistory/OrderHistory.js","components/Admin/spinner/Spinner.js"],"sourcesContent":["\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport jsPDF from 'jspdf';\r\nimport './OrderHistory.css';\r\nimport Spinner from '../../spinner/Spinner';\r\n\r\nconst CustomerOrders = () => {\r\n  const [customers, setCustomers] = useState([]);\r\n  const [selectedCustomer, setSelectedCustomer] = useState('');\r\n  const [orders, setOrders] = useState([]);\r\n  const [filteredOrders, setFilteredOrders] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [invoiceDetails, setInvoiceDetails] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n  useEffect(() => {\r\n    const fetchCustomers = async () => {\r\n      setLoading(true); // Set loading to true\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        const response = await fetch('https://prasad-gz5p.onrender.com/api/manage-negotiated-prices/', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Token ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch customers');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setCustomers(data.customers || []);\r\n      } catch (error) {\r\n        console.error('Error fetching customers:', error);\r\n      } finally {\r\n        setLoading(false); // Set loading to false after fetch\r\n      }\r\n    };\r\n\r\n    const fetchProducts = async () => {\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        const response = await fetch('https://prasad-gz5p.onrender.com/api/products/', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Token ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch products');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setProducts(data);\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      }\r\n    };\r\n\r\n    fetchCustomers();\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      if (!selectedCustomer) return; // Don't fetch if no customer is selected\r\n\r\n      setLoading(true); // Set loading to true\r\n      const token = localStorage.getItem('authToken');\r\n      try {\r\n        const response = await fetch('https://prasad-gz5p.onrender.com/api/view-customer-orders/', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Token ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch orders');\r\n        }\r\n\r\n        const data = await response.json();\r\n        const customerOrders = data.orders.invoices.filter(\r\n          (order) => order.customer_mobile_number === selectedCustomer\r\n        );\r\n        setOrders(customerOrders);\r\n        setFilteredOrders(customerOrders);\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      } finally {\r\n        setLoading(false); // Set loading to false after fetch\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, [selectedCustomer]);\r\n\r\n  useEffect(() => {\r\n    let filtered = orders;\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(\r\n        (order) =>\r\n          order.id.toString().includes(searchTerm) ||\r\n          order.price.toString().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    if (selectedDate) {\r\n      filtered = filtered.filter(\r\n        (order) => order.date === selectedDate\r\n      );\r\n    }\r\n\r\n    setFilteredOrders(filtered);\r\n  }, [searchTerm, selectedDate, orders]);\r\n\r\n  const handleRowClick = async (orderId) => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const response = await fetch(`https://prasad-gz5p.onrender.com/api/view-invoice/${orderId}/`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Token ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch invoice details');\r\n      }\r\n\r\n      const invoiceData = await response.json();\r\n      setInvoiceDetails(invoiceData);\r\n      setIsModalOpen(true);\r\n    } catch (error) {\r\n      console.error('Error fetching invoice details:', error);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setInvoiceDetails(null);\r\n  };\r\n\r\n  const getProductDetails = (productId) => {\r\n    const product= products.find(product => product.productid === productId);\r\n    console.log(product);\r\n    return(product);\r\n  };\r\n\r\n  const downloadPDF = () => {\r\n    const doc = new jsPDF();\r\n   \r\n    // Define margins\r\n    const leftMargin = 10;\r\n    const topMargin = 10;\r\n    const lineHeight = 10; // Space between lines\r\n   \r\n    // Set font size\r\n    doc.setFontSize(16);\r\n   \r\n    // Add Invoice ID\r\n    doc.text(`Invoice ID: ${invoiceDetails.invoice_id}`, leftMargin, topMargin);\r\n    doc.text('Items:', leftMargin, topMargin + lineHeight);\r\n   \r\n    let yPosition = topMargin + lineHeight * 2; // Start position for items\r\n   \r\n    invoiceDetails.items.forEach((item, index) => {\r\n      const product = products.find(prod => prod.productid === item.product_id);\r\n      const itemDetails = `\r\n        Product ID: ${item.product_id}\r\n        Quantity: ${item.quantity}\r\n        Total Price: ${item.total_price}\r\n        ${product ? `Category: ${product.productCategory}` : ''}\r\n        ${product ? `Volume: ${product.productVolume}` : ''}\r\n      `;\r\n     \r\n      // Split itemDetails into lines to avoid exceeding PDF width\r\n      const lines = doc.splitTextToSize(itemDetails, 190 - leftMargin * 2); // Adjust width for margins\r\n      doc.text(lines, leftMargin, yPosition);\r\n      yPosition += lines.length * lineHeight; // Adjust the position for the next item\r\n    });\r\n   \r\n    // Save the PDF with a filename\r\n    doc.save(`invoice_${invoiceDetails.invoice_id}.pdf`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"customer-orders-container-V040\">\r\n      {loading ? (\r\n        <div className=\"loader\">\r\n\r\n            <Spinner/>\r\n        </div> // Loader\r\n      ) : (\r\n        <>\r\n          <h2 className=\"customer-orders-title-V040\">Select Customer</h2>\r\n          <select\r\n            className=\"customer-select-V040\"\r\n            value={selectedCustomer}\r\n            onChange={(e) => setSelectedCustomer(e.target.value)}\r\n          >\r\n            <option value=\"\">Select a customer</option>\r\n            {customers.map((customer) => (\r\n              <option key={customer.id} value={customer.mobile_number}>\r\n                {customer.mobile_number}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <div className=\"filter-container-V040\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"search-input-V040\"\r\n              placeholder=\"Search by Order ID or Price\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"date\"\r\n              className=\"date-picker-V040\"\r\n              value={selectedDate}\r\n              onChange={(e) => setSelectedDate(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {filteredOrders.length > 0 ? (\r\n            <div className=\"orders-section-V040\">\r\n              <h3 className=\"orders-title-V040\">Orders for {selectedCustomer}</h3>\r\n              <table className=\"orders-table-V040\">\r\n                <thead>\r\n                  <tr className=\"table-header-V040\">\r\n                    <th className=\"table-header-item-V040\">Order ID</th>\r\n                    <th className=\"table-header-item-V040\">Customer Name</th>\r\n                    <th className=\"table-header-item-V040\">Price</th>\r\n                    <th className=\"table-header-item-V040\">Date</th>\r\n                    <th className=\"table-header-item-V040\">Supplier</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredOrders.map((order) => (\r\n                    <tr className=\"table-row-V040\" key={order.id} onClick={() => handleRowClick(order.id)}>\r\n                      <td className=\"table-data-V040\">{order.id}</td>\r\n                      <td className=\"table-data-V040\">{order.customer_name}</td>\r\n                      <td className=\"table-data-V040\">{order.price}</td>\r\n                      <td className=\"table-data-V040\">{order.date}</td>\r\n                      <td className=\"table-data-V040\">{order.supplier_name}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ) : (\r\n            selectedCustomer && (\r\n              <div className=\"no-orders-message-V040\">\r\n                <p>No orders found for the selected customer.</p>\r\n              </div>\r\n            )\r\n          )}\r\n\r\n          {isModalOpen && invoiceDetails && (\r\n            <div className=\"modal-VA40\">\r\n              <div className=\"modal-content-VA40\">\r\n                <h3>Invoice ID: {invoiceDetails.invoice_id}</h3>\r\n                <h4>Items:</h4>\r\n                <ul>\r\n                  {invoiceDetails.items.map((item, index) => {\r\n                    const product = getProductDetails(item.product_id);\r\n                    return (\r\n                      <li key={index} className=\"invoice-item-VA40\">\r\n                        <div className=\"invoice-item-wrapper-VA40\">\r\n                          <div className=\"invoice-product-image-VA40\">\r\n                            {/* {product && product.image && <img src={product.image} alt={product.product_name} />} */}\r\n                            {product && product.productImage && (\r\n                    <img src={product.productImage} alt={product.productCategory} />\r\n                  )}\r\n                          </div>\r\n                          <div className=\"invoice-item-details-VA40\">\r\n                            <strong>Product ID: {item.product_id} </strong>  <br />\r\n                            <strong>Quantity: {item.quantity}</strong>  <br />\r\n                            <strong>Total Price: {item.total_price}</strong>  <br />\r\n                            {product && (\r\n                              <>\r\n                                <strong>Category: {product.productCategory} </strong>  <br />\r\n                                <strong>Volume: {product.productVolume}</strong> \r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n                <button className=\"modal-close-button-VA40\" onClick={closeModal}>Close</button>\r\n                <button className=\"download-button-VA40\" onClick={downloadPDF}>Download PDF</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerOrders;\r\n","import React from 'react';\r\nimport './Spinner.css'; // Make sure to import the CSS file\r\n \r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Spinner;"],"names":["CustomerOrders","customers","setCustomers","useState","selectedCustomer","setSelectedCustomer","orders","setOrders","filteredOrders","setFilteredOrders","searchTerm","setSearchTerm","selectedDate","setSelectedDate","invoiceDetails","setInvoiceDetails","isModalOpen","setIsModalOpen","products","setProducts","loading","setLoading","useEffect","async","token","localStorage","getItem","response","fetch","method","headers","ok","Error","data","json","error","console","fetchCustomers","fetchProducts","customerOrders","invoices","filter","order","customer_mobile_number","fetchOrders","filtered","id","toString","includes","price","date","_jsx","className","children","Spinner","_jsxs","_Fragment","value","onChange","e","target","map","customer","mobile_number","type","placeholder","length","onClick","orderId","invoiceData","handleRowClick","customer_name","supplier_name","invoice_id","items","item","index","product","productId","find","productid","log","getProductDetails","product_id","productImage","src","alt","productCategory","quantity","total_price","productVolume","closeModal","downloadPDF","doc","jsPDF","setFontSize","text","topMargin","yPosition","forEach","prod","itemDetails","lines","splitTextToSize","save","Array","from","_"],"sourceRoot":""}