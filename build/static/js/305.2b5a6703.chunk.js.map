{"version":3,"file":"static/js/305.2b5a6703.chunk.js","mappings":"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","sources":["components/Admin/adminHome/brands/UpdateBrand.js","components/Admin/adminHome/brands/AddBrand.js","components/Admin/adminHome/brands/BrandList.js","components/Admin/spinner/Spinner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './UpdateBrand.css'; // Import the CSS file\r\n \r\nconst UpdateBrand = ({ onBrandUpdate, selectedBrand }) => {\r\n    const [updatedBrand, setUpdatedBrand] = useState({ brandID: '', brandName: '', brandLogo: null });\r\n    const [existingLogo, setExistingLogo] = useState(''); // Store the current logo URL\r\n    const [message, setMessage] = useState('');\r\n \r\n    useEffect(() => {\r\n        if (selectedBrand) {\r\n            setUpdatedBrand({\r\n                brandID: selectedBrand.brandID,\r\n                brandName: selectedBrand.brandName,\r\n                brandLogo: null, // Reset the logo since it's file upload\r\n            });\r\n            setExistingLogo(selectedBrand.brandLogo); // Set existing logo URL\r\n        }\r\n    }, [selectedBrand]);\r\n \r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setUpdatedBrand({ ...updatedBrand, [name]: value });\r\n    };\r\n \r\n    const handleFileChange = (e) => {\r\n        setUpdatedBrand({ ...updatedBrand, brandLogo: e.target.files[0] });\r\n    };\r\n \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('brandID', updatedBrand.brandID);\r\n        formData.append('brandName', updatedBrand.brandName);\r\n \r\n        // Only append brandLogo if a new one is uploaded\r\n        if (updatedBrand.brandLogo) {\r\n            formData.append('brandLogo', updatedBrand.brandLogo);\r\n        } else if (existingLogo) {\r\n            const response = await fetch(existingLogo);\r\n            const blob = await response.blob();\r\n            const file = new File([blob], existingLogo.split('/').pop(), { type: 'image/jpeg' });\r\n            formData.append('brandLogo', file);\r\n        }\r\n \r\n        const token = localStorage.getItem('authToken'); // Get the token from localStorage\r\n \r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/brands/${updatedBrand.brandID}/update/`, {\r\n                method: 'PUT',\r\n                body: formData,\r\n                headers: {\r\n                    'Authorization': `Token ${token}`, // Include token with 'Token' prefix\r\n                },\r\n            });\r\n \r\n            if (!response.ok) {\r\n                throw new Error('Failed to update brand');\r\n            }\r\n \r\n            const updatedBrandData = await response.json();\r\n \r\n            // If no new logo is uploaded, keep the existing one\r\n            const logoURL = updatedBrand.brandLogo ? URL.createObjectURL(updatedBrand.brandLogo) : existingLogo;\r\n            onBrandUpdate({ ...updatedBrandData, brandLogo: logoURL }); // Notify parent about the updated brand\r\n \r\n            setUpdatedBrand({ brandID: '', brandName: '', brandLogo: null });\r\n            setMessage('Brand updated successfully!');\r\n        } catch (err) {\r\n            setMessage(err.message);\r\n        }\r\n    };\r\n \r\n    return (\r\n        <div className=\"update-brand-containerV028\">\r\n            <h2 className=\"update-brand-titleV028\">Update Brand</h2>\r\n            <form onSubmit={handleSubmit} className=\"update-brand-formV028\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"brandID\"\r\n                    placeholder=\"Brand ID\"\r\n                    value={updatedBrand.brandID}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    disabled\r\n                    className=\"update-brand-inputV028\"\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"brandName\"\r\n                    placeholder=\"Brand Name\"\r\n                    value={updatedBrand.brandName}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    className=\"update-brand-inputV028\"\r\n                />\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"brandLogo\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleFileChange}\r\n                    className=\"update-brand-fileV028\"\r\n                />\r\n                {existingLogo && (\r\n                    <div className=\"update-brand-logoV028\">\r\n                        <img src={existingLogo} alt=\"Current Brand Logo\" className=\"update-brand-imgV028\" />\r\n                        <p className=\"update-brand-current-logoV028\">Current logo: {existingLogo.split('/').pop()}</p>\r\n                        <label className=\"update-brand-checkbox-labelV028\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={!updatedBrand.brandLogo}\r\n                                onChange={() => setUpdatedBrand({ ...updatedBrand, brandLogo: null })}\r\n                                className=\"update-brand-checkboxV028\"\r\n                            />\r\n                            Use current logo\r\n                        </label>\r\n                    </div>\r\n                )}\r\n                <button type=\"submit\" className=\"update-brand-buttonV028\">Update Brand</button>\r\n            </form>\r\n            {message && <div className=\"update-brand-messageV028\">{message}</div>}\r\n        </div>\r\n    );\r\n};\r\n \r\nexport default UpdateBrand;","import React, { useState } from 'react';\r\nimport \"./AddBrand.css\";\r\n\r\nconst AddBrand = ({ onBrandAdded }) => {\r\n    const [newBrand, setNewBrand] = useState({ brandID: '', brandName: '', brandLogo: null });\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setNewBrand({ ...newBrand, [name]: value });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setNewBrand({ ...newBrand, brandLogo: e.target.files[0] });\r\n    };\r\n    \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n    const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setMessage('You are not authenticated. Please log in.');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append('brandID', newBrand.brandID);\r\n        formData.append('brandName', newBrand.brandName);\r\n        if (newBrand.brandLogo) {\r\n            formData.append('brandLogo', newBrand.brandLogo);\r\n        }\r\n \r\n        try {\r\n            const response = await fetch(`https://prasad-gz5p.onrender.com/api/brands/`, {\r\n                method: 'POST',\r\n    headers: {\r\n        'Authorization': `Token ${token}`,\r\n    },\r\n                body: formData,\r\n            });\r\n \r\n            if (!response.ok) {\r\n                throw new Error('Failed to add brand');\r\n            }\r\n \r\n            const addedBrand = await response.json();\r\n            onBrandAdded(addedBrand); // Notify parent about the newly added brand\r\n \r\n            setNewBrand({ brandID: '', brandName: '', brandLogo: null });\r\n            \r\n        } catch (err) {\r\n            setMessage(err.message);\r\n        }\r\n    };    return (\r\n        <div className=\"add-brand-containerV029\">\r\n            <h2 className=\"add-brand-titleV029\">Add a New Brand</h2>\r\n            <form onSubmit={handleSubmit} className=\"add-brand-formV029\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"brandID\"\r\n                    placeholder=\"Brand ID\"\r\n                    value={newBrand.brandID}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    className=\"add-brand-inputV029\"\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"brandName\"\r\n                    placeholder=\"Brand Name\"\r\n                    value={newBrand.brandName}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    className=\"add-brand-inputV029\"\r\n                />\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"brandLogo\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleFileChange}\r\n                    className=\"add-brand-fileV029\"\r\n                />\r\n                <button type=\"submit\" className=\"add-brand-buttonV029\">Add Brand</button>\r\n            </form>\r\n            {message && <div className=\"add-brand-messageV029\">{message}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddBrand;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './BrandList.css';\r\nimport UpdateBrand from './UpdateBrand';\r\nimport AddBrand from './AddBrand';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport Spinner from '../../spinner/Spinner';\r\n \r\nconst BrandList = () => {\r\n    const [brands, setBrands] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [selectedBrand, setSelectedBrand] = useState(null);\r\n    const [showAddBrandForm, setShowAddBrandForm] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const updateModalRef = useRef(null);\r\n \r\n    useEffect(() => {\r\n        const fetchBrands = async () => {\r\n            try {\r\n                const response = await fetch('https://prasad-gz5p.onrender.com/api/brands/');\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setBrands(data);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n \r\n        fetchBrands();\r\n    }, []);\r\n \r\n    const handleBrandUpdate = (updatedBrand) => {\r\n        setBrands((prevBrands) =>\r\n            prevBrands.map((brand) =>\r\n                brand.brandID === updatedBrand.brandID\r\n                ? { ...brand, brandName: updatedBrand.brandName, brandLogo: updatedBrand.brandLogo }\r\n                : brand\r\n            )\r\n        );\r\n        setSelectedBrand(null);\r\n        updateModalRef.current.close();\r\n    };\r\n \r\n    const handleBrandAdd = (newBrand) => {\r\n        setBrands([...brands, newBrand]);\r\n        setShowAddBrandForm(false);\r\n    };\r\n \r\n    const handleUpdateClick = (brand) => {\r\n        setSelectedBrand(brand);\r\n        updateModalRef.current.showModal();\r\n    };\r\n \r\n    // Filter brands based on the search term\r\n    const filteredBrands = brands.filter((brand) =>\r\n        brand.brandName.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n \r\n    if (loading) {\r\n        return <div>\r\n            <Spinner/>\r\n        </div>;\r\n    }\r\n \r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n \r\n    return (\r\n        <div className=\"brand-listV030\">\r\n            \r\n            {/* Add Brand Button */}\r\n                <div className='arrow-back-124'>\r\n            <button\r\n                className=\"add-brand-buttonV030\"\r\n                onClick={() => setShowAddBrandForm(!showAddBrandForm)}\r\n            >\r\n                {showAddBrandForm ? 'Cancel' : 'Add Brand'}\r\n            </button>\r\n            {/* <Link to=\"/admin-home\" className=\"back-button124\">\r\n                <FontAwesomeIcon icon={faArrowLeft} size=\"2x\" />\r\n            </Link> */}\r\n            </div>\r\n            {/* Search Bar */}\r\n            <div className=\"search-bar-containerV030\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Brand Name\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"search-barV030\"\r\n                />\r\n            </div>\r\n \r\n            {/* AddBrand form, show when \"Add Brand\" is clicked */}\r\n            {showAddBrandForm && <AddBrand onBrandAdded={handleBrandAdd} />}\r\n \r\n            <div className=\"card-containerV030\">\r\n                {filteredBrands.map((brand) => (\r\n                    <div className=\"brand-cardV030\" key={brand.brandID}>\r\n                        <img\r\n                            src={brand.brandLogo}\r\n                            alt={brand.brandName}\r\n                            className=\"brand-logoV030\"\r\n                        />\r\n                        <h2 className=\"brand-nameV030\">{brand.brandName}</h2>\r\n                        <div className=\"button-containerV030\">\r\n                            <Link to={`/products/${brand.brandID}`} className=\"view-buttonV030\">\r\n                                Products\r\n                            </Link>\r\n                            <button\r\n                                className=\"update-buttonV030\"\r\n                                onClick={() => handleUpdateClick(brand)}\r\n                            >\r\n                                Update\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n \r\n            {/* Modal for UpdateBrand */}\r\n            <dialog ref={updateModalRef} className=\"update-brand-modalV030\">\r\n                {selectedBrand && (\r\n                    <UpdateBrand\r\n                        selectedBrand={selectedBrand}\r\n                        onBrandUpdate={handleBrandUpdate}\r\n                    />\r\n                )}\r\n                <button\r\n                    className=\"close-modal-buttonV030\"\r\n                    onClick={() => updateModalRef.current.close()}\r\n                >\r\n                    Close\r\n                </button>\r\n            </dialog>\r\n        </div>\r\n    );\r\n};\r\n \r\nexport default BrandList;","import React from 'react';\r\nimport './Spinner.css'; // Make sure to import the CSS file\r\n \r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"dot-spinner-container\">\r\n      <div className=\"dot-spinner\">\r\n        {Array.from({ length: 8 }, (_, index) => (\r\n          <div key={index} className={`dot-spinner__dot dot-spinner__dot--${index + 1}`}></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n \r\nexport default Spinner;"],"names":["_ref","onBrandUpdate","selectedBrand","updatedBrand","setUpdatedBrand","useState","brandID","brandName","brandLogo","existingLogo","setExistingLogo","message","setMessage","useEffect","handleInputChange","e","name","value","target","_jsxs","className","children","_jsx","onSubmit","async","preventDefault","formData","FormData","append","response","fetch","blob","file","File","split","pop","type","token","localStorage","getItem","method","body","headers","ok","Error","updatedBrandData","json","logoURL","URL","createObjectURL","err","placeholder","onChange","required","disabled","accept","files","src","alt","checked","onBrandAdded","newBrand","setNewBrand","addedBrand","BrandList","brands","setBrands","loading","setLoading","error","setError","setSelectedBrand","showAddBrandForm","setShowAddBrandForm","searchTerm","setSearchTerm","updateModalRef","useRef","data","fetchBrands","filteredBrands","filter","brand","toLowerCase","includes","Spinner","onClick","AddBrand","map","Link","to","current","showModal","handleUpdateClick","ref","UpdateBrand","prevBrands","close","Array","from","length","_","index"],"sourceRoot":""}